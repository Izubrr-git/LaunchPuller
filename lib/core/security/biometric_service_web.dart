// lib/core/security/biometric_service_web.dart
import 'dart:html' as html;
import 'dart:js_util';
import 'package:flutter/foundation.dart';
import 'biometric_service.dart';

class BiometricServiceImpl implements BiometricService {
  @override
  Future<bool> isAvailable() async {
    try {
      return html.window.navigator.credentials != null;
    } catch (e) {
      debugPrint('‚ùå WebAuthn –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: $e');
      return false;
    }
  }

  @override
  Future<bool> authenticate({
    required String reason,
    bool useErrorDialogs = true,
  }) async {
    try {
      return await _performWebAuthn(reason);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ WebAuthn: $e');
      if (useErrorDialogs) {
        _showError('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: $e');
      }
      return false;
    }
  }

  Future<bool> _performWebAuthn(String reason) async {
    // –í–∞—à–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ WebAuthn
    try {
      final challenge = _generateChallenge();

      // –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞...
      return html.window.confirm(
          '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n\n$reason\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?'
      );
    } catch (e) {
      debugPrint('‚ùå WebAuthn –æ—à–∏–±–∫–∞: $e');
      return false;
    }
  }

  List<int> _generateChallenge() {
    return List<int>.generate(32, (i) =>
    (DateTime.now().millisecondsSinceEpoch + i) % 256);
  }

  void _showError(String message) {
    html.window.alert('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: $message');
  }

  @override
  Future<List<BiometricType>> getAvailableBiometrics() async {
    if (await isAvailable()) {
      return [BiometricType.webAuth];
    }
    return [];
  }

  @override
  Future<bool> isBiometricEnabled() async {
    try {
      final enabled = html.window.localStorage['webauthn_enabled'];
      return enabled == 'true';
    } catch (e) {
      return false;
    }
  }

  @override
  Future<void> setBiometricEnabled(bool enabled) async {
    try {
      html.window.localStorage['webauthn_enabled'] = enabled.toString();
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WebAuthn: $e');
    }
  }

  @override
  Future<void> clearWebAuthnData() async {
    try {
      html.window.localStorage.remove('webauthn_enabled');
      debugPrint('üóëÔ∏è –î–∞–Ω–Ω—ã–µ WebAuthn –æ—á–∏—â–µ–Ω—ã');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ WebAuthn: $e');
    }
  }
}