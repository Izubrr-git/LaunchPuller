import 'dart:html' as html;
import 'dart:js_util';
import 'package:flutter/foundation.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';

part 'biometric_service.g.dart';

@riverpod
BiometricService biometricService(BiometricServiceRef ref) {
  return BiometricService();
}

/// –°–µ—Ä–≤–∏—Å Web Authentication API
class BiometricService {
  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ WebAuthn
  Future<bool> isAvailable() async {
    if (!kIsWeb) return false;

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ WebAuthn API
      return html.window.navigator.credentials != null;
    } catch (e) {
      debugPrint('‚ùå WebAuthn –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: $e');
      return false;
    }
  }

  /// Web Authentication
  Future<bool> authenticate({
    required String reason,
    bool useErrorDialogs = true,
  }) async {
    if (!kIsWeb) return false;

    try {
      return await _performWebAuthn(reason);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ WebAuthn: $e');
      if (useErrorDialogs) {
        _showError('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: $e');
      }
      return false;
    }
  }

  /// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ WebAuthn –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  Future<bool> _performWebAuthn(String reason) async {
    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º challenge
      final challenge = _generateChallenge();

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è WebAuthn
      final publicKeyCredentialRequestOptions = {
        'challenge': challenge,
        'timeout': 60000,
        'rpId': html.window.location.hostname,
        'userVerification': 'preferred',
        'allowCredentials': [], // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è passwordless
      };

      // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è credential (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)
      try {
        final createOptions = {
          'challenge': challenge,
          'rp': {
            'name': 'Launchpool Manager',
            'id': html.window.location.hostname,
          },
          'user': {
            'id': _stringToUint8Array('launchpool_user'),
            'name': 'user@launchpool.app',
            'displayName': 'Launchpool User',
          },
          'pubKeyCredParams': [
            {'alg': -7, 'type': 'public-key'}, // ES256
            {'alg': -257, 'type': 'public-key'}, // RS256
          ],
          'authenticatorSelection': {
            'authenticatorAttachment': 'platform',
            'userVerification': 'preferred',
            'requireResidentKey': false,
          },
          'timeout': 60000,
          'attestation': 'none',
        };

        final credential = await promiseToFuture(
          html.window.navigator.credentials!.create({
            'publicKey': createOptions,
          }),
        );

        if (credential != null) {
          debugPrint('‚úÖ WebAuthn credential —Å–æ–∑–¥–∞–Ω');
          return true;
        }
      } catch (e) {
        // –ï—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        debugPrint('‚ÑπÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ credential');
      }

      // –ü–æ–ø—ã—Ç–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ credential
      final credential = await promiseToFuture(
        html.window.navigator.credentials!.get({
          'publicKey': publicKeyCredentialRequestOptions,
        }),
      );

      if (credential != null) {
        debugPrint('‚úÖ WebAuthn –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
        return true;
      }

      // Fallback –Ω–∞ –ø—Ä–æ—Å—Ç–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      return await _showConfirmDialog(reason);

    } catch (e) {
      debugPrint('‚ùå WebAuthn –æ—à–∏–±–∫–∞: $e');
      // Fallback –Ω–∞ –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      return await _showConfirmDialog(reason);
    }
  }

  /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è challenge –¥–ª—è WebAuthn
  List<int> _generateChallenge() {
    final challenge = List<int>.generate(32, (i) =>
    (DateTime.now().millisecondsSinceEpoch + i) % 256);
    return challenge;
  }

  /// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ Uint8Array
  List<int> _stringToUint8Array(String str) {
    return str.codeUnits;
  }

  /// –ü–æ–∫–∞–∑ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (fallback)
  Future<bool> _showConfirmDialog(String reason) async {
    return html.window.confirm(
        '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n\n$reason\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?'
    );
  }

  /// –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏
  void _showError(String message) {
    html.window.alert('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: $message');
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–∞—Ö
  Future<List<BiometricType>> getAvailableBiometrics() async {
    if (!kIsWeb) return [];

    try {
      if (await isAvailable()) {
        return [BiometricType.webAuth];
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∏–æ–º–µ—Ç—Ä–∏–∏: $e');
    }

    return [];
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  Future<bool> isBiometricEnabled() async {
    if (!kIsWeb) return false;

    try {
      final enabled = html.window.localStorage['webauthn_enabled'];
      return enabled == 'true';
    } catch (e) {
      return false;
    }
  }

  /// –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ WebAuthn
  Future<void> setBiometricEnabled(bool enabled) async {
    if (!kIsWeb) return;

    try {
      html.window.localStorage['webauthn_enabled'] = enabled.toString();
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WebAuthn: $e');
    }
  }

  /// –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö WebAuthn
  Future<void> clearWebAuthnData() async {
    if (!kIsWeb) return;

    try {
      html.window.localStorage.remove('webauthn_enabled');
      debugPrint('üóëÔ∏è –î–∞–Ω–Ω—ã–µ WebAuthn –æ—á–∏—â–µ–Ω—ã');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ WebAuthn: $e');
    }
  }
}

/// –¢–∏–ø—ã –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
enum BiometricType {
  webAuth('Web Authentication');

  const BiometricType(this.displayName);
  final String displayName;
}