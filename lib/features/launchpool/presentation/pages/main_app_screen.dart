import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:launch_puller/core/enums/launchpool_status.dart';
import 'package:launch_puller/features/launchpool/presentation/providers/launchpool_provider.dart';
import 'package:launch_puller/features/launchpool/presentation/widgets/common/auth_status_widget.dart';
import 'package:launch_puller/features/launchpool/presentation/widgets/common/exchange_menu_button.dart';
import 'package:launch_puller/features/launchpool/presentation/widgets/common/loading_states.dart';
import 'package:launch_puller/features/launchpool/presentation/widgets/common/network_status_indicator.dart';
import 'package:launch_puller/features/launchpool/presentation/widgets/common/responsive_layout.dart';
import 'package:launch_puller/features/launchpool/presentation/widgets/content/launchpool_content.dart';
import 'package:launch_puller/features/launchpool/presentation/widgets/filters/exchange_filter.dart';
import 'package:launch_puller/features/launchpool/presentation/widgets/filters/status_filter.dart';

/// –û—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class MainAppScreen extends ConsumerWidget {
  const MainAppScreen({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final currentMode = ref.watch(exchangeWorkModeProvider);

    return Scaffold(
      appBar: _buildAppBar(context, ref, currentMode),
      body: _buildBody(context, ref, currentMode),
      floatingActionButton: FloatingActionButton.extended(
        onPressed: () {
          ref.invalidate(filteredLaunchpoolsProvider);
        },
        label: const Text('–û–±–Ω–æ–≤–∏—Ç—å'),
        icon: const Icon(Icons.refresh),
      ),
    );
  }

  PreferredSizeWidget _buildAppBar(BuildContext context, WidgetRef ref, ExchangeWorkMode currentMode) {
    return AppBar(
      backgroundColor: Theme.of(context).colorScheme.inversePrimary,
      elevation: 0,
      leading: const ExchangeMenuButton(),
      leadingWidth: 200, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –¥–ª—è –ø–æ–º–µ—â–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º
      title: Text(
        _getScreenTitle(currentMode),
        style: Theme.of(context).textTheme.titleLarge?.copyWith(
          fontWeight: FontWeight.bold,
        ),
      ),
      actions: [
        // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        IconButton(
          icon: const Icon(Icons.refresh),
          onPressed: () => ref.invalidate(filteredLaunchpoolsProvider),
          tooltip: '–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ',
        ),

        // –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        IconButton(
          icon: const Icon(Icons.settings),
          onPressed: () => _openSettings(context),
          tooltip: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
        ),

        // –°—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        const AuthStatusWidget(),

        const SizedBox(width: 8),
      ],
    );

    // return AppBar(
    //   leading: const ExchangeMenuButton(),
    //   title: const Text('Launchpools'),
    //   backgroundColor: Theme.of(context).colorScheme.inversePrimary,
    //   actions: [
    //     // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–µ—Ç–∏
    //      NetworkStatusIndicator(),
    //      SizedBox(width: 8),
    //
    //     // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    //      AuthStatusWidget(),
    //      SizedBox(width: 8),
    //
    //     // –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    //     _SettingsButton(),
    //      SizedBox(width: 8),
    //   ],
    // );
  }

  Widget _buildBody(BuildContext context, WidgetRef ref, ExchangeWorkMode currentMode) {
    final launchpoolsAsync = ref.watch(filteredLaunchpoolsProvider);
    final filter = ref.watch(launchpoolStateProvider);
    return Column(
      children: [
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        const ConnectionInfoBanner(),

        // –§–∏–ª—å—Ç—Ä—ã
        Container(
          padding: const EdgeInsets.all(16),
          child: Column(
            children: [
              // –ü–æ–∏—Å–∫
              SearchBar(
                hintText: '–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, —Å–∏–º–≤–æ–ª—É –∏–ª–∏ —Ç–æ–∫–µ–Ω—É...',
                onChanged: (query) {
                  ref.read(launchpoolStateProvider.notifier).setSearchQuery(query);
                },
                leading: const Icon(Icons.search),
                trailing: filter.searchQuery.isNotEmpty
                    ? [
                        IconButton(
                          icon: const Icon(Icons.clear),
                          onPressed: () {
                            ref.read(launchpoolStateProvider.notifier).setSearchQuery('');
                          },
                        ),
                      ]
                    : null,
              ),
              const SizedBox(height: 16),

              // –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
              if (filter.hasActiveFilters)
                Row(
                  children: [
                    Expanded(
                      child: OutlinedButton.icon(
                        onPressed: () {
                          ref.read(launchpoolStateProvider.notifier).clearFilters();
                        },
                        icon: const Icon(Icons.clear_all),
                        label: const Text('–û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã'),
                      ),
                    ),
                  ],
                ),
              if (filter.hasActiveFilters) const SizedBox(height: 16),

              // –§–∏–ª—å—Ç—Ä—ã –ø–æ –±–∏—Ä–∂–∞–º –∏ —Å—Ç–∞—Ç—É—Å—É
              const ExchangeFilter(),
              const SizedBox(height: 8),
              const StatusFilter(),
            ],
          ),
        ),
        const Divider(),

        // –°–ø–∏—Å–æ–∫ Launchpool'–æ–≤
        Expanded(
          child: launchpoolsAsync.when(
            data: (launchpools) {
              if (launchpools.isEmpty) {
                return EmptyState(
                  hasFilters: filter.hasActiveFilters,
                  onClearFilters: () {
                    ref.read(launchpoolStateProvider.notifier).clearFilters();
                  },
                );
              }
              return ResponsiveLaunchpoolGrid(launchpools: launchpools);
            },
            loading: () => const LoadingState(),
            error: (error, stack) => ErrorState(
              error: error,
              onRetry: () {
                ref.invalidate(filteredLaunchpoolsProvider);
              },
            ),
          ),
        ),
      ],
    );
  }

  String _getScreenTitle(ExchangeWorkMode currentMode) {
    switch (currentMode) {
      case ExchangeWorkMode.launchpool:
        return 'Launch Pools';
      case ExchangeWorkMode.trading:
        return '–¢–æ—Ä–≥–æ–≤–ª—è';
      case ExchangeWorkMode.analytics:
        return '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞';
      case ExchangeWorkMode.portfolio:
        return '–ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å';
    }
  }

  Widget _buildPlaceholder(
    BuildContext context, {
    required IconData icon,
    required String title,
    required String subtitle,
  }) {
    final theme = Theme.of(context);

    return Center(
      child: Padding(
        padding: const EdgeInsets.all(32),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Container(
              width: 120,
              height: 120,
              decoration: BoxDecoration(
                color: theme.colorScheme.primaryContainer.withOpacity(0.3),
                shape: BoxShape.circle,
              ),
              child: Icon(icon, size: 60, color: theme.colorScheme.primary),
            ),
            const SizedBox(height: 24),
            Text(
              title,
              style: theme.textTheme.headlineSmall?.copyWith(
                fontWeight: FontWeight.bold,
                color: theme.colorScheme.primary,
              ),
            ),
            const SizedBox(height: 12),
            Text(
              subtitle,
              style: theme.textTheme.bodyLarge?.copyWith(color: theme.colorScheme.onSurfaceVariant),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 32),
            FilledButton.icon(
              onPressed: () {
                ScaffoldMessenger.of(
                  context,
                ).showSnackBar(const SnackBar(content: Text('üîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞')));
              },
              icon: const Icon(Icons.notifications_active),
              label: const Text('–£–≤–µ–¥–æ–º–∏—Ç—å –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏'),
            ),
          ],
        ),
      ),
    );
  }
}
void _openSettings(BuildContext context) {
  showDialog(
    context: context,
    builder: (context) => AlertDialog(
      title: const Row(children: [Icon(Icons.settings), SizedBox(width: 8), Text('–ù–∞—Å—Ç—Ä–æ–π–∫–∏')]),
      content: const Text(
        '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:\n\n'
            '‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n'
            '‚Ä¢ –¢–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è\n'
            '‚Ä¢ –Ø–∑—ã–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n'
            '‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n'
            '‚Ä¢ API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è',
      ),
      actions: [
        TextButton(onPressed: () => Navigator.of(context).pop(), child: const Text('–ó–∞–∫—Ä—ã—Ç—å')),
        FilledButton(
          onPressed: () {
            Navigator.of(context).pop();
            Navigator.of(context).pushNamed('/settings');
          },
          child: const Text('–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'),
        ),
      ],
    ),
  );
}
/// –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ AppBar
class _SettingsButton extends StatelessWidget {
  const _SettingsButton();

  @override
  Widget build(BuildContext context) {
    return IconButton(icon: const Icon(Icons.settings), onPressed: () => _openSettings(context), tooltip: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏');
  }

  void _openSettings(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Row(children: [Icon(Icons.settings), SizedBox(width: 8), Text('–ù–∞—Å—Ç—Ä–æ–π–∫–∏')]),
        content: const Text(
          '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:\n\n'
          '‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n'
          '‚Ä¢ –¢–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è\n'
          '‚Ä¢ –Ø–∑—ã–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n'
          '‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n'
          '‚Ä¢ API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è',
        ),
        actions: [
          TextButton(onPressed: () => Navigator.of(context).pop(), child: const Text('–ó–∞–∫—Ä—ã—Ç—å')),
          FilledButton(
            onPressed: () {
              Navigator.of(context).pop();
              Navigator.of(context).pushNamed('/settings');
            },
            child: const Text('–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'),
          ),
        ],
      ),
    );
  }
}