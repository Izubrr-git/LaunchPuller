import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:launch_puller/core/enums/launchpool_status.dart';
import 'package:launch_puller/features/launchpool/presentation/providers/launchpool_provider.dart';
import 'package:launch_puller/features/launchpool/presentation/widgets/common/auth_status_widget.dart';
import 'package:launch_puller/features/launchpool/presentation/widgets/common/exchange_menu_button.dart';
import 'package:launch_puller/features/launchpool/presentation/widgets/common/loading_states.dart';
import 'package:launch_puller/features/launchpool/presentation/widgets/common/network_status_indicator.dart';
import 'package:launch_puller/features/launchpool/presentation/widgets/common/responsive_layout.dart';
import 'package:launch_puller/features/launchpool/presentation/widgets/filters/exchange_filter.dart';
import 'package:launch_puller/features/launchpool/presentation/widgets/filters/status_filter.dart';

/// –û—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é
class MainAppScreen extends ConsumerWidget {
  const MainAppScreen({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final currentMode = ref.watch(exchangeWorkModeProvider);

    return Scaffold(
      appBar: _buildAppBar(context, ref, currentMode),
      body: _buildBody(context, ref, currentMode),
      floatingActionButton: _buildFloatingActionButton(context, ref, currentMode),
    );
  }

  PreferredSizeWidget _buildAppBar(
      BuildContext context,
      WidgetRef ref,
      ExchangeWorkMode currentMode,
      ) {
    final theme = Theme.of(context);

    return AppBar(
      backgroundColor: Theme.of(context).colorScheme.inversePrimary,
      elevation: 0,
      leading: const Padding(
        padding: EdgeInsets.all(8.0),
        child: ExchangeMenuButton(),
      ),
      leadingWidth: 200,
      title: Text(
        _getScreenTitle(currentMode),
        style: theme.textTheme.titleLarge?.copyWith(
          fontWeight: FontWeight.bold,
        ),
      ),
      actions: [
        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–µ—Ç–∏
        NetworkStatusIndicator(),
        const SizedBox(width: 8),

        // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        AuthStatusWidget(),
        const SizedBox(width: 8),

        IconButton(
          icon: const Icon(Icons.settings),
          onPressed: () => _openSettings(context),
          tooltip: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
        ),
        const SizedBox(width: 8),
      ],
    );
  }

  Widget _buildBody(
      BuildContext context,
      WidgetRef ref,
      ExchangeWorkMode currentMode,
      ) {
    return ResponsiveLayout(
      mobile: _buildMobileLayout(context, ref, currentMode),
      tablet: _buildTabletLayout(context, ref, currentMode),
      desktop: _buildDesktopLayout(context, ref, currentMode),
    );
  }

  Widget _buildMobileLayout(
      BuildContext context,
      WidgetRef ref,
      ExchangeWorkMode currentMode,
      ) {
    return Column(
      children: [
        if (currentMode == ExchangeWorkMode.launchpool)
          Container(
            padding: const EdgeInsets.all(16),
            child: Row(
              children: [
                const Expanded(child: CompactStatusFilter()),
                const SizedBox(width: 12),
                OutlinedButton.icon(
                  onPressed: () => _showFiltersBottomSheet(context, ref),
                  icon: const Icon(Icons.filter_list, size: 16),
                  label: const Text('–§–∏–ª—å—Ç—Ä—ã'),
                  style: OutlinedButton.styleFrom(
                    padding: const EdgeInsets.symmetric(
                      horizontal: 12,
                      vertical: 8,
                    ),
                  ),
                ),
              ],
            ),
          ),
        Expanded(
          child: _buildMainContent(context, ref, currentMode),
        ),
      ],
    );
  }

  Widget _buildTabletLayout(
      BuildContext context,
      WidgetRef ref,
      ExchangeWorkMode currentMode,
      ) {
    return Row(
      children: [
        if (currentMode == ExchangeWorkMode.launchpool)
          Container(
            width: 300,
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Theme.of(context).colorScheme.surfaceVariant.withOpacity(0.3),
              border: Border(
                right: BorderSide(
                  color: Theme.of(context).colorScheme.outline.withOpacity(0.2),
                ),
              ),
            ),
            child: const Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                StatusFilter(),
                SizedBox(height: 24),
                ExchangeFilter(),
                SizedBox(height: 24),
                StatusStats(),
              ],
            ),
          ),
        Expanded(
          child: _buildMainContent(context, ref, currentMode),
        ),
      ],
    );
  }

  Widget _buildDesktopLayout(
      BuildContext context,
      WidgetRef ref,
      ExchangeWorkMode currentMode,
      ) {
    return _buildTabletLayout(context, ref, currentMode);
  }

  Widget _buildMainContent(
      BuildContext context,
      WidgetRef ref,
      ExchangeWorkMode currentMode,
      ) {
    switch (currentMode) {
      case ExchangeWorkMode.launchpool:
        return _buildLaunchpoolContent(context, ref);
      case ExchangeWorkMode.trading:
        return _buildTradingPlaceholder(context);
      case ExchangeWorkMode.analytics:
        return _buildAnalyticsPlaceholder(context);
      case ExchangeWorkMode.portfolio:
        return _buildPortfolioPlaceholder(context);
    }
  }

  Widget _buildLaunchpoolContent(BuildContext context, WidgetRef ref) {
    final launchpoolsAsync = ref.watch(filteredLaunchpoolsProvider);

    return launchpoolsAsync.when(
      data: (launchpools) => ResponsiveLaunchpoolGrid(launchpools: launchpools),
      loading: () => const LoadingState(message: '–ó–∞–≥—Ä—É–∑–∫–∞ Launchpool\'–æ–≤...'),
      error: (error, stack) => ErrorState(
        error: error,
        onRetry: () => ref.invalidate(filteredLaunchpoolsProvider),
      ),
    );
  }

  Widget _buildTradingPlaceholder(BuildContext context) {
    return _buildPlaceholder(
      context,
      icon: Icons.candlestick_chart,
      title: '–¢–æ—Ä–≥–æ–≤–ª—è',
      subtitle: '–°–ø–æ—Ç–æ–≤–∞—è –∏ —Ñ—å—é—á–µ—Ä—Å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è\n–±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö',
    );
  }

  Widget _buildAnalyticsPlaceholder(BuildContext context) {
    return _buildPlaceholder(
      context,
      icon: Icons.analytics,
      title: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
      subtitle: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã\n–±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö',
    );
  }

  Widget _buildPortfolioPlaceholder(BuildContext context) {
    return _buildPlaceholder(
      context,
      icon: Icons.account_balance_wallet,
      title: '–ü–æ—Ä—Ç—Ñ–µ–ª—å',
      subtitle: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞–º–∏ –∏ P&L\n–±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö',
    );
  }

  Widget _buildPlaceholder(
      BuildContext context, {
        required IconData icon,
        required String title,
        required String subtitle,
      }) {
    final theme = Theme.of(context);

    return Center(
      child: Padding(
        padding: const EdgeInsets.all(32),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Container(
              width: 120,
              height: 120,
              decoration: BoxDecoration(
                color: theme.colorScheme.primaryContainer.withOpacity(0.3),
                shape: BoxShape.circle,
              ),
              child: Icon(
                icon,
                size: 60,
                color: theme.colorScheme.primary,
              ),
            ),
            const SizedBox(height: 24),
            Text(
              title,
              style: theme.textTheme.headlineSmall?.copyWith(
                fontWeight: FontWeight.bold,
                color: theme.colorScheme.primary,
              ),
            ),
            const SizedBox(height: 12),
            Text(
              subtitle,
              style: theme.textTheme.bodyLarge?.copyWith(
                color: theme.colorScheme.onSurfaceVariant,
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 32),
            FilledButton.icon(
              onPressed: () {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                    content: Text('üîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞'),
                  ),
                );
              },
              icon: const Icon(Icons.notifications_active),
              label: const Text('–£–≤–µ–¥–æ–º–∏—Ç—å –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏'),
            ),
          ],
        ),
      ),
    );
  }

  Widget? _buildFloatingActionButton(
      BuildContext context,
      WidgetRef ref,
      ExchangeWorkMode currentMode,
      ) {
    if (!currentMode.isAvailable) return null;

    switch (currentMode) {
      case ExchangeWorkMode.launchpool:
        return FloatingActionButton.extended(
          onPressed: () => _quickLaunchpoolAction(context, ref),
          icon: const Icon(Icons.rocket_launch),
          label: const Text('–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫'),
          tooltip: '–ù–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ Launchpool',
        );
      case ExchangeWorkMode.trading:
        return FloatingActionButton.extended(
          onPressed: () => _quickTradingAction(context),
          icon: const Icon(Icons.add_chart),
          label: const Text('–ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞'),
        );
      case ExchangeWorkMode.analytics:
        return FloatingActionButton.extended(
          onPressed: () => _quickAnalyticsAction(context),
          icon: const Icon(Icons.insights),
          label: const Text('–ê–Ω–∞–ª–∏–∑'),
        );
      case ExchangeWorkMode.portfolio:
        return FloatingActionButton.extended(
          onPressed: () => _quickPortfolioAction(context),
          icon: const Icon(Icons.sync),
          label: const Text('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è'),
        );
    }
  }

  String _getScreenTitle(ExchangeWorkMode currentMode) {
    switch (currentMode) {
      case ExchangeWorkMode.launchpool:
        return 'Launch Pools';
      case ExchangeWorkMode.trading:
        return '–¢–æ—Ä–≥–æ–≤–ª—è';
      case ExchangeWorkMode.analytics:
        return '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞';
      case ExchangeWorkMode.portfolio:
        return '–ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å';
    }
  }

  void _refreshData(WidgetRef ref, ExchangeWorkMode currentMode) {
    switch (currentMode) {
      case ExchangeWorkMode.launchpool:
        ref.invalidate(filteredLaunchpoolsProvider);
        break;
      case ExchangeWorkMode.trading:
      case ExchangeWorkMode.analytics:
      case ExchangeWorkMode.portfolio:
      // –ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
        break;
    }
  }

  void _openSettings(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Row(
          children: [
            Icon(Icons.settings),
            SizedBox(width: 8),
            Text('–ù–∞—Å—Ç—Ä–æ–π–∫–∏'),
          ],
        ),
        content: const Text(
          '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:\n\n'
              '‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n'
              '‚Ä¢ –¢–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è\n'
              '‚Ä¢ –Ø–∑—ã–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n'
              '‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n'
              '‚Ä¢ API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('–ó–∞–∫—Ä—ã—Ç—å'),
          ),
          FilledButton(
            onPressed: () {
              Navigator.of(context).pop();
              Navigator.of(context).pushNamed('/settings');
            },
            child: const Text('–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'),
          ),
        ],
      ),
    );
  }

  void _showFiltersBottomSheet(BuildContext context, WidgetRef ref) {
    showModalBottomSheet(
      context: context,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (context) => Container(
        padding: const EdgeInsets.all(20),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '–§–∏–ª—å—Ç—Ä—ã',
              style: Theme.of(context).textTheme.titleLarge?.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 20),
            const StatusFilter(),
            const SizedBox(height: 20),
            const ExchangeFilter(),
            const SizedBox(height: 20),
            Row(
              children: [
                Expanded(
                  child: OutlinedButton(
                    onPressed: () {
                      ref.read(launchpoolStateProvider.notifier).clearFilters();
                      Navigator.of(context).pop();
                    },
                    child: const Text('–û—á–∏—Å—Ç–∏—Ç—å'),
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: FilledButton(
                    onPressed: () => Navigator.of(context).pop(),
                    child: const Text('–ü—Ä–∏–º–µ–Ω–∏—Ç—å'),
                  ),
                ),
              ],
            ),
            SizedBox(height: MediaQuery.of(context).padding.bottom + 16),
          ],
        ),
      ),
    );
  }

  void _quickLaunchpoolAction(BuildContext context, WidgetRef ref) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Row(
          children: [
            Icon(Icons.rocket_launch),
            SizedBox(width: 8),
            Text('–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫'),
          ],
        ),
        content: const Text(
          '–ü–æ–∏—Å–∫ —Å–∞–º—ã—Ö –≤—ã–≥–æ–¥–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö Launchpool:\n\n'
              'üéØ –ü–æ APY > 20%\n'
              '‚è∞ –ù–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å–µ–≥–æ–¥–Ω—è\n'
              'üí∞ –° –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –ø–æ—Ä–æ–≥–æ–º –≤—Ö–æ–¥–∞\n'
              'üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('–û—Ç–º–µ–Ω–∞'),
          ),
          FilledButton(
            onPressed: () {
              Navigator.of(context).pop();
              final notifier = ref.read(launchpoolStateProvider.notifier);
              notifier
                ..setStatusFilter(LaunchpoolStatus.active)
                ..setMinApyFilter(20.0);
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(
                  content: Text('üöÄ –ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –≤—ã–≥–æ–¥–Ω—ã—Ö Launchpool'),
                ),
              );
            },
            child: const Text('–ù–∞–π—Ç–∏'),
          ),
        ],
      ),
    );
  }

  void _quickTradingAction(BuildContext context) {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('üìà –§—É–Ω–∫—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö'),
      ),
    );
  }

  void _quickAnalyticsAction(BuildContext context) {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('üìä –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö'),
      ),
    );
  }

  void _quickPortfolioAction(BuildContext context) {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('üíº –§—É–Ω–∫—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö'),
      ),
    );
  }
}

/// –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
class CompactMainAppScreen extends ConsumerWidget {
  const CompactMainAppScreen({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final currentMode = ref.watch(exchangeWorkModeProvider);

    return Scaffold(
      appBar: AppBar(
        backgroundColor: Theme.of(context).colorScheme.surface,
        elevation: 0,
        leading: const CompactExchangeMenuButton(),
        title: Text(_getScreenTitle(currentMode)),
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh),
            onPressed: () => _refreshData(ref, currentMode),
          ),
          const CompactAuthStatusWidget(),
        ],
      ),
      body: _buildMobileContent(context, ref, currentMode),
      floatingActionButton: _buildCompactFAB(context, ref, currentMode),
    );
  }

  Widget _buildMobileContent(
      BuildContext context,
      WidgetRef ref,
      ExchangeWorkMode currentMode,
      ) {
    if (currentMode == ExchangeWorkMode.launchpool) {
      final launchpoolsAsync = ref.watch(filteredLaunchpoolsProvider);

      return Column(
        children: [
          Container(
            padding: const EdgeInsets.all(16),
            child: Row(
              children: [
                const Expanded(child: CompactStatusFilter()),
                const SizedBox(width: 8),
                IconButton(
                  icon: const Icon(Icons.filter_list),
                  onPressed: () => _showMobileFilters(context, ref),
                  tooltip: '–§–∏–ª—å—Ç—Ä—ã',
                ),
              ],
            ),
          ),
          Expanded(
            child: launchpoolsAsync.when(
              data: (launchpools) => ResponsiveLaunchpoolGrid(launchpools: launchpools),
              loading: () => const LoadingState(message: '–ó–∞–≥—Ä—É–∑–∫–∞...'),
              error: (error, stack) => ErrorState(
                error: error,
                onRetry: () => ref.invalidate(filteredLaunchpoolsProvider),
              ),
            ),
          ),
        ],
      );
    } else {
      return _buildMobilePlaceholder(context, currentMode);
    }
  }

  Widget _buildMobilePlaceholder(BuildContext context, ExchangeWorkMode currentMode) {
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(24),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              currentMode.icon,
              size: 80,
              color: Theme.of(context).colorScheme.primary,
            ),
            const SizedBox(height: 16),
            Text(
              currentMode.displayName,
              style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              '–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ',
              style: Theme.of(context).textTheme.bodyLarge?.copyWith(
                color: Theme.of(context).colorScheme.onSurfaceVariant,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget? _buildCompactFAB(BuildContext context, WidgetRef ref, ExchangeWorkMode currentMode) {
    if (!currentMode.isAvailable) return null;

    return FloatingActionButton(
      onPressed: () => _handleFABPress(context, ref, currentMode),
      tooltip: _getFABtooltip(currentMode),
      child: Icon(currentMode.icon),
    );
  }

  String _getScreenTitle(ExchangeWorkMode currentMode) {
    return currentMode.displayName;
  }

  String _getFABtooltip(ExchangeWorkMode currentMode) {
    switch (currentMode) {
      case ExchangeWorkMode.launchpool:
        return '–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫';
      case ExchangeWorkMode.trading:
        return '–ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞';
      case ExchangeWorkMode.analytics:
        return '–ê–Ω–∞–ª–∏–∑';
      case ExchangeWorkMode.portfolio:
        return '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è';
    }
  }

  void _handleFABPress(BuildContext context, WidgetRef ref, ExchangeWorkMode currentMode) {
    switch (currentMode) {
      case ExchangeWorkMode.launchpool:
        _showQuickSearch(context, ref);
        break;
      default:
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('${currentMode.displayName} —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ'),
          ),
        );
    }
  }

  void _showQuickSearch(BuildContext context, WidgetRef ref) {
    showModalBottomSheet(
      context: context,
      builder: (context) => Container(
        padding: const EdgeInsets.all(20),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
              'üöÄ –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫',
              style: Theme.of(context).textTheme.titleLarge,
            ),
            const SizedBox(height: 20),
            ListTile(
              leading: const Icon(Icons.trending_up),
              title: const Text('–í—ã—Å–æ–∫–∏–π APY'),
              subtitle: const Text('APY > 20%'),
              onTap: () => _applyQuickFilter(context, ref, 'high_apy'),
            ),
            ListTile(
              leading: const Icon(Icons.schedule),
              title: const Text('–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è'),
              subtitle: const Text('–ù–æ–≤—ã–µ –ø—É–ª—ã'),
              onTap: () => _applyQuickFilter(context, ref, 'starting_today'),
            ),
            ListTile(
              leading: const Icon(Icons.attach_money),
              title: const Text('–ù–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –≤—Ö–æ–¥–∞'),
              subtitle: const Text('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞'),
              onTap: () => _applyQuickFilter(context, ref, 'low_threshold'),
            ),
          ],
        ),
      ),
    );
  }

  void _applyQuickFilter(BuildContext context, WidgetRef ref, String filterType) {
    Navigator.of(context).pop();
    final notifier = ref.read(launchpoolStateProvider.notifier);

    switch (filterType) {
      case 'high_apy':
        notifier
          ..setStatusFilter(LaunchpoolStatus.active)
          ..setMinApyFilter(20.0);
        break;
      case 'starting_today':
        notifier
          ..setStatusFilter(LaunchpoolStatus.upcoming)
          ..setStartDateFilter(DateTime.now());
        break;
      case 'low_threshold':
        notifier
          ..setStatusFilter(LaunchpoolStatus.active)
          ..setMaxMinStakeFilter(100.0);
        break;
    }

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('–ü—Ä–∏–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä: ${_getFilterName(filterType)}'),
      ),
    );
  }

  void _showMobileFilters(BuildContext context, WidgetRef ref) {
    showModalBottomSheet(
      context: context,
      builder: (context) => Container(
        padding: const EdgeInsets.all(20),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Text('–§–∏–ª—å—Ç—Ä—ã', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
            const SizedBox(height: 20),
            const StatusFilter(),
            const SizedBox(height: 16),
            const ExchangeFilter(),
            const SizedBox(height: 16),
            Row(
              children: [
                Expanded(
                  child: OutlinedButton(
                    onPressed: () {
                      ref.read(launchpoolStateProvider.notifier).clearFilters();
                      Navigator.of(context).pop();
                    },
                    child: const Text('–û—á–∏—Å—Ç–∏—Ç—å'),
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: FilledButton(
                    onPressed: () => Navigator.of(context).pop(),
                    child: const Text('–ü—Ä–∏–º–µ–Ω–∏—Ç—å'),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  void _refreshData(WidgetRef ref, ExchangeWorkMode currentMode) {
    switch (currentMode) {
      case ExchangeWorkMode.launchpool:
        ref.invalidate(filteredLaunchpoolsProvider);
        break;
      case ExchangeWorkMode.trading:
      case ExchangeWorkMode.analytics:
      case ExchangeWorkMode.portfolio:
        break;
    }
  }

  String _getFilterName(String filterType) {
    switch (filterType) {
      case 'high_apy':
        return '–í—ã—Å–æ–∫–∏–π APY (>20%)';
      case 'starting_today':
        return '–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è';
      case 'low_threshold':
        return '–ù–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –≤—Ö–æ–¥–∞';
      default:
        return filterType;
    }
  }
}