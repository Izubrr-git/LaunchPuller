import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter/foundation.dart';
import 'package:launch_puller/core/security/secure_storage_service.dart';
import 'package:launch_puller/core/utils/crypto_utils.dart';
import 'package:launch_puller/core/constants/api_constants.dart';

part 'bybit_auth_service.g.dart';

@riverpod
BybitAuthService bybitAuthService(BybitAuthServiceRef ref) {
  return BybitAuthService(
    secureStorage: ref.watch(secureStorageServiceProvider),
  );
}

class BybitAuthService {
  const BybitAuthService({required this.secureStorage});

  final SecureStorageService secureStorage;

  static const String _apiKeyKey = 'bybit_api_key';
  static const String _apiSecretKey = 'bybit_api_secret';
  static const String _isTestnetKey = 'bybit_is_testnet';

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ credentials —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–µ—Å—Å–∏–∏
  Future<BybitCredentials?> getCredentials({
    String? userPassword,
    bool requireAuth = true,
  }) async {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ –¥–ª—è Web –∏ Windows
      if (requireAuth && (kIsWeb || defaultTargetPlatform == TargetPlatform.windows)) {
        if (!await secureStorage.validateSessionToken()) {
          debugPrint('üö® –°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞');
          return null;
        }
      }

      final apiKey = await secureStorage.readSecure(
        key: _apiKeyKey,
        userPassword: userPassword,
      );

      final apiSecret = await secureStorage.readSecure(
        key: _apiSecretKey,
        userPassword: userPassword,
      );

      if (apiKey == null || apiSecret == null) {
        return null;
      }

      final prefs = await SharedPreferences.getInstance();
      final isTestnet = prefs.getBool(_isTestnetKey) ?? false;

      return BybitCredentials(
        apiKey: apiKey,
        apiSecret: apiSecret,
        isTestnet: isTestnet,
      );
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è credentials: $e');
      return null;
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ credentials —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é
  Future<void> saveCredentials(
      BybitCredentials credentials, {
        String? userPassword,
      }) async {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–ª—é—á–µ–π
    if (!CryptoUtils.isValidApiKey(credentials.apiKey) ||
        !CryptoUtils.isValidApiSecret(credentials.apiSecret)) {
      throw const SecurityException('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ API –∫–ª—é—á–∏');
    }

    // –î–ª—è Web –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ç—Ä–µ–±—É–µ–º –ø–∞—Ä–æ–ª—å
    if (kIsWeb && userPassword == null) {
      throw const SecurityException('–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è Web –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã');
    }

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º
    await secureStorage.writeSecure(
      key: _apiKeyKey,
      value: credentials.apiKey,
      userPassword: userPassword,
    );

    await secureStorage.writeSecure(
      key: _apiSecretKey,
      value: credentials.apiSecret,
      userPassword: userPassword,
    );

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞ testnet –≤ –æ–±—ã—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool(_isTestnetKey, credentials.isTestnet);

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
    await secureStorage.createSessionToken();

    debugPrint('‚úÖ API –∫–ª—é—á–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
  }

  /// –û—á–∏—Å—Ç–∫–∞ credentials
  Future<void> clearCredentials() async {
    await secureStorage.delete(_apiKeyKey);
    await secureStorage.delete(_apiSecretKey);
    await secureStorage.invalidateSession();

    final prefs = await SharedPreferences.getInstance();
    await prefs.remove(_isTestnetKey);

    debugPrint('üóëÔ∏è API –∫–ª—é—á–∏ —É–¥–∞–ª–µ–Ω—ã');
  }

  /// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ testnet
  Future<void> toggleTestnet() async {
    final prefs = await SharedPreferences.getInstance();
    final currentTestnet = prefs.getBool(_isTestnetKey) ?? false;
    await prefs.setBool(_isTestnetKey, !currentTestnet);

    debugPrint('üîÑ Testnet –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω: ${!currentTestnet}');
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ URL
  Future<String> getBaseUrl() async {
    final prefs = await SharedPreferences.getInstance();
    final isTestnet = prefs.getBool(_isTestnetKey) ?? false;
    return isTestnet ? ApiConstants.bybitTestnet : ApiConstants.bybitMainnet;
  }

  /// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  Future<Map<String, String>> buildAuthHeaders({
    required String endpoint,
    required String method,
    Map<String, String>? queryParams,
    String? body,
    String? userPassword,
  }) async {
    final credentials = await getCredentials(userPassword: userPassword);
    if (credentials == null) {
      throw const SecurityException('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è');
    }

    final timestamp = DateTime.now().millisecondsSinceEpoch.toString();
    final recvWindow = ApiConstants.recvWindow.toString();

    String params = '';
    if (method == 'GET' && queryParams != null) {
      params = CryptoUtils.buildQueryString(queryParams);
    } else if (method == 'POST' && body != null) {
      params = body;
    }

    final payload = CryptoUtils.buildSignaturePayload(
      timestamp: timestamp,
      apiKey: credentials.apiKey,
      recvWindow: recvWindow,
      queryParams: method == 'GET' ? params : null,
      body: method == 'POST' ? params : null,
    );

    final signature = CryptoUtils.generateHmacSha256(
      secret: credentials.apiSecret,
      message: payload,
    );

    return {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      'X-BAPI-API-KEY': credentials.apiKey,
      'X-BAPI-TIMESTAMP': timestamp,
      'X-BAPI-RECV-WINDOW': recvWindow,
      'X-BAPI-SIGN': signature,
    };
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è (–¥–ª—è Web)
  static bool isPasswordRequired() {
    return kIsWeb;
  }

  /// –û—Ü–µ–Ω–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  Future<SecurityAssessment> assessSecurity() async {
    return await secureStorage.assessSecurity();
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–ª—ã –ø–∞—Ä–æ–ª—è
  static PasswordStrength checkPasswordStrength(String password) {
    if (password.length < 8) return PasswordStrength.weak;

    bool hasUpper = password.contains(RegExp(r'[A-Z]'));
    bool hasLower = password.contains(RegExp(r'[a-z]'));
    bool hasDigits = password.contains(RegExp(r'[0-9]'));
    bool hasSpecial = password.contains(RegExp(r'[!@#$%^&*(),.?":{}|<>]'));

    int score = 0;
    if (hasUpper) score++;
    if (hasLower) score++;
    if (hasDigits) score++;
    if (hasSpecial) score++;
    if (password.length >= 12) score++;

    if (score >= 4) return PasswordStrength.strong;
    if (score >= 2) return PasswordStrength.medium;
    return PasswordStrength.weak;
  }
}

/// –ú–æ–¥–µ–ª—å credentials
class BybitCredentials {
  const BybitCredentials({
    required this.apiKey,
    required this.apiSecret,
    required this.isTestnet,
  });

  final String apiKey;
  final String apiSecret;
  final bool isTestnet;

  BybitCredentials copyWith({
    String? apiKey,
    String? apiSecret,
    bool? isTestnet,
  }) {
    return BybitCredentials(
      apiKey: apiKey ?? this.apiKey,
      apiSecret: apiSecret ?? this.apiSecret,
      isTestnet: isTestnet ?? this.isTestnet,
    );
  }

  String get baseUrl {
    return isTestnet ? ApiConstants.bybitTestnet : ApiConstants.bybitMainnet;
  }
}

/// –°–∏–ª–∞ –ø–∞—Ä–æ–ª—è
enum PasswordStrength {
  weak('–°–ª–∞–±—ã–π'),
  medium('–°—Ä–µ–¥–Ω–∏–π'),
  strong('–°–∏–ª—å–Ω—ã–π');

  const PasswordStrength(this.displayName);
  final String displayName;
}